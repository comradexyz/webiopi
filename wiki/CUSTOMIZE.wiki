<font color="red">*Warning : this page is being updated for both trunk and next version, please refer to included doc in WebIOPi 0.2 tarball*</font>


WebIOPi UI customization is easy but requires some CSS knowledge. The basic technic is to hide all controls, then show and move wanted controls. You will also need to add a Javascript line for each button you want to change the label.

<font color="red">*Before starting, make a copy of _skeleton_ in the _app_ directory*</font>

=CSS naming=
http://trouch.com/wp-content/uploads/2012/08/webiopi-cssnaming.png

All the *UI* is included in a single div, with the *id _webiopi_*. This box then contains a 6 cols x 13 rows table which is dynamically buit. Each cell has a single control.

RPi pins *buttons* are html inputs (type=submit), and inherit the _input_ CSS style. Their *id are from _gpio0_ to _gpio25_*. There is also two classes for both low and high states, and also somes for non GPIO pins :
  * *.LOW* : GPIO in low state
  * *.HIGH* : GPIO in high state
  * .DNC : Do not connect
  * .GND : Ground
  * .V33 : 3.3V
  * .V50 : 5.0V
  * .UART
  * .SPI
  * .I2C

RPi pins *direction buttons* are also html inputs, with *id from _direction0_ to _direction25_*. Two classes are also used :
  * .DirectionEnabled : Direction button for enabled GPIOs
  * .DirectionDisabled : Direction button for disabled GPIOs

RPi pins *descriptions* are made of html div, *id from _name1_ to _name26_*, with a single class :
  * .Description : Text on the left/right of each pin

=Example=
Included style.css in skeleton contains what you need to hide existing controls. Just add some lines in the CSS file to display wanted controls :
{{{
#gpio0 {
        visibility: visible;
        top: 20px;
        left: 20px;
        width: 80px;
        height: 80px;
        font-size: 24pt;
        font-weight: bold;
}

#gpio7 {
        visibility: visible;
        top: 120px;
        left: 20px;
        width: 80px;
        height: 80px;
        font-size: 24pt;
        font-weight: bold;
        color: black;
}

#gpio7.LOW {
        background-color: white;
}

#gpio7.HIGH {
        background-color: red;
}

}}}
will display the GPIOs 0 and 7, with two bigs buttons in the upper-left corner. It also changes the background color of the GPIO 7 for both low and high states.

In your HTML file, you also have to add some Javascript next to the CSS link :
{{{
<title>WebIOPi | Example</title>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../webiopi.js"></script>
<link rel="stylesheet" type="text/css" href="../../webiopi.css" />
<link rel="stylesheet" type="text/css" href="style.css" />
<script type="text/javascript">
$(document).ready(function() {
	webiopi().createHeader();

	webiopi().setDirection(0, "in");
	webiopi().setLabel(0, "SW");

	webiopi().setDirection(7, "out");
	webiopi().setLabel(7, "LED");
});
</script>
}}}

Then open a browser by appending mypage.html to the usual URL (http://raspberrypi/webiopi/mypage.html) and you will see 2 big controls :
  * The first one allows you to see the input state on the GPIO 0 : connect it to the ground (using a switch), and the control will become black.
  * The second, will allow you to control a led on GPIO 7, connected in serial with a resistor to the ground.

http://trouch.com/wp-content/uploads/2012/08/webiopi-mypage.png

http://trouch.com/wp-content/uploads/2012/08/WebIOPi-demo.png