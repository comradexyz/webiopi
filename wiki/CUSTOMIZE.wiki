*<font color="red">This page is being updated for the upcoming release. Please refer to the doc included in the WebIOPi 0.3 archive</font>*

WebIOPi UI customization is easy but requires some Javascript and CSS knowledge. 

=HTML/Javascript=
The WebIOPi Javascript library allows you to make your own interface easily, only requiring one single script tag to include /webiopi.js

WebIOPi will automatically load and add required jquery.js and webiopi.css into your HTML file at runtime !
Then you can use the [JAVASCRIPT Javascript library] to build the interface, creating buttons and registering callbacks. Check [PYTHON Python example] for the related server script.

This is the included demo/demo.html :
{{{
# First import webiopi
import webiopi
import time

# I use the integrated GPIO lib, but you can use RPi.GPIO
GPIO = webiopi.GPIO

# A custom macro which prints out the arg received and return OK
def myMacro(arg):
    print("myMacro(%s)" % arg)
    return "OK"

# Instantiate the server on the port 8000, it starts immediately in its own thread
server = webiopi.Server(port=8000, login="webiopi", password="raspberry")

# Register the macro so you can call it through the [RESTAPI] or [JAVASCRIPT]
server.addMacro(myMacro)

# Setup GPIOs
GPIO.setFunction(1, GPIO.IN)
GPIO.setFunction(7, GPIO.OUT)
GPIO.setFunction(8, GPIO.PWM)
GPIO.setFunction(9, GPIO.PWM)

GPIO.pulseRatio(8, 0.5) # 50% duty cycle ratio
GPIO.pulseAngle(9, 0)   # neutral

# Example loop which toggle GPIO 9 each 5 seconds
try:
    while True:
        GPIO.output(7, not GPIO.input(7))
        time.sleep(5)        

# Break the loop by pressing CTRL-C
except KeyboardInterrupt:
    pass

# Stops the server
server.stop()

# Reset GPIO functions
GPIO.setFunction(1, GPIO.IN)
GPIO.setFunction(7, GPIO.IN)
GPIO.setFunction(8, GPIO.IN)
GPIO.setFunction(9, GPIO.IN)
}}}


=CSS styling=
Once you wrote your HTML file with your Javascript code, you may want to add some CSS rules, in order change colors, size, positioning... Is's very simple as you follow the naming convention to write your CSS file.

Pin *state buttons (LOW/HIGH)* are HTML input[type="submit"], and inherit the _input_ CSS style. Their *id are from _gpio0_ to _gpio53_*. There is also two classes for both low and high states, and also somes for non GPIO pins :
  * *LOW* : GPIO in low state
  * *HIGH* : GPIO in high state
  * GND : Ground
  * V33 : 3.3V
  * V50 : 5.0V
  * UART0
  * SPI0
  * I2C0
  * I2C1
  * Button : Generic buttons

With the included RPi header and expert webapps, you can also customize function button and descriptions :

Pin *function buttons (IN/OUT/...)* are also HTML input[type="submit"], with *id from _function0_ to _function53_*. Two classes are also used :
  * .FunctionBasic : Used when GPIO is Input or Output
  * .FunctionSpecial : Used when GPIO is in ALTx (default is hidden)

Pin *descriptions* are made of hTMl div, with *id from _name0_ to _name53_*, with a single class :
  * .Description : Text on the left/right of each pin

=Example=
Included demo/demo.css :
{{{
@CHARSET "UTF-8";

input {
	display: block;
	margin: 5px 5px 5px 5px;
	width: 150px;
	height: 60px;
	font-size: 24pt;
	font-weight: bold;
	color: black;
}

#gpio7.LOW {
	background-color: White;
}

#gpio7.HIGH {
	background-color: Red;
}

}}}
Will display big buttons arranged in a column. It also changes the background color of the GPIO 7 for both low and high states.


Start the associated _demo.py_ script *in the demo folder* then open a browser to http://raspberrypi/webiopi/demo.html